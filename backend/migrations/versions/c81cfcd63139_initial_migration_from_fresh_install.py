"""Initial migration from fresh install

Revision ID: c81cfcd63139
Revises: 
Create Date: 2025-06-23 08:24:54.692807

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'c81cfcd63139'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('application_settings',
    sa.Column('setting_key', sa.String(length=100), nullable=False, comment='Kunci unik untuk pengaturan'),
    sa.Column('setting_value', sa.Text(), nullable=True, comment='Nilai dari pengaturan'),
    sa.Column('description', sa.Text(), nullable=True, comment='Penjelasan mengenai fungsi pengaturan ini'),
    sa.Column('is_encrypted', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('setting_key')
    )
    op.create_table('package_profiles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('profile_name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('package_profiles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_package_profiles_profile_name'), ['profile_name'], unique=True)

    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('phone_number', sa.String(length=25), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('full_name', sa.String(length=100), nullable=False),
    sa.Column('blok', sa.String(length=10), nullable=True),
    sa.Column('kamar', sa.String(length=20), nullable=True),
    sa.Column('previous_blok', sa.String(length=10), nullable=True, comment='Menyimpan data blok terakhir sebelum diupgrade ke admin'),
    sa.Column('previous_kamar', sa.String(length=20), nullable=True, comment='Menyimpan data kamar terakhir sebelum diupgrade ke admin'),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('role', sa.Enum('USER', 'KOMANDAN', 'ADMIN', 'SUPER_ADMIN', name='user_role_enum', native_enum=False), nullable=False),
    sa.Column('approval_status', sa.Enum('PENDING_APPROVAL', 'APPROVED', 'REJECTED', name='approval_status_enum', native_enum=False), nullable=False),
    sa.Column('mikrotik_user_exists', sa.Boolean(), server_default=sa.text('false'), nullable=False, comment='Flag untuk menandakan user sudah ada di Mikrotik.'),
    sa.Column('mikrotik_server_name', sa.String(length=100), nullable=True, comment='Nama server hotspot spesifik di Mikrotik.'),
    sa.Column('mikrotik_profile_name', sa.String(length=100), nullable=True, comment='Nama profil hotspot spesifik di Mikrotik.'),
    sa.Column('mikrotik_password', sa.String(length=255), nullable=True),
    sa.Column('total_quota_purchased_mb', sa.BigInteger(), server_default='0', nullable=False),
    sa.Column('total_quota_used_mb', sa.Numeric(precision=15, scale=2), server_default='0.0', nullable=False),
    sa.Column('quota_expiry_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_unlimited_user', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('device_brand', sa.String(length=100), nullable=True),
    sa.Column('device_model', sa.String(length=100), nullable=True),
    sa.Column('raw_user_agent', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('approved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('approved_by_id', sa.UUID(), nullable=True),
    sa.Column('rejected_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('rejected_by_id', sa.UUID(), nullable=True),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_low_quota_notif_at', sa.DateTime(timezone=True), nullable=True, comment='Waktu terakhir notifikasi kuota rendah dikirim'),
    sa.Column('last_expiry_notif_at', sa.DateTime(timezone=True), nullable=True, comment='Waktu terakhir notifikasi akan kedaluwarsa dikirim'),
    sa.ForeignKeyConstraint(['approved_by_id'], ['users.id'], name='fk_users_approved_by_id_users'),
    sa.ForeignKeyConstraint(['rejected_by_id'], ['users.id'], name='fk_users_rejected_by_id_users'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('phone_number', name='uq_users_phone_number')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index('ix_users_phone_number', ['phone_number'], unique=True)

    op.create_table('admin_action_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('admin_id', sa.UUID(), nullable=True),
    sa.Column('target_user_id', sa.UUID(), nullable=True),
    sa.Column('action_type', sa.Enum('CREATE_USER', 'APPROVE_USER', 'REJECT_USER', 'CHANGE_USER_ROLE', 'UPGRADE_TO_ADMIN', 'DOWNGRADE_TO_USER', 'DOWNGRADE_FROM_ADMIN', 'INJECT_QUOTA', 'SET_UNLIMITED_STATUS', 'REVOKE_UNLIMITED_STATUS', 'ACTIVATE_USER', 'DEACTIVATE_USER', 'RESET_HOTSPOT_PASSWORD', 'GENERATE_ADMIN_PASSWORD', 'MANUAL_USER_DELETE', 'UPDATE_USER_PROFILE', 'PROCESS_QUOTA_REQUEST_APPROVE', 'PROCESS_QUOTA_REQUEST_REJECT', 'PROCESS_QUOTA_REQUEST_PARTIALLY_APPROVED', name='admin_action_type_enum', native_enum=False), nullable=False),
    sa.Column('details', sa.Text(), nullable=True, comment='Detail aksi dalam format JSON'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('admin_action_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_admin_action_logs_action_type'), ['action_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_admin_action_logs_admin_id'), ['admin_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_admin_action_logs_target_user_id'), ['target_user_id'], unique=False)

    op.create_table('daily_usage_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('log_date', sa.Date(), nullable=False),
    sa.Column('usage_mb', sa.Numeric(precision=15, scale=2), server_default='0.0', nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_daily_usage_logs_user_id_users', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'log_date', name='uq_daily_usage_logs_user_log_date')
    )
    with op.batch_alter_table('daily_usage_logs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_daily_usage_logs_log_date'), ['log_date'], unique=False)
        batch_op.create_index('ix_daily_usage_logs_user_id_log_date', ['user_id', 'log_date'], unique=False)

    op.create_table('notification_recipients',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('admin_user_id', sa.UUID(), nullable=False),
    sa.Column('notification_type', sa.Enum('NEW_USER_REGISTRATION', 'NEW_KOMANDAN_REQUEST', 'ROLE_UPGRADE_TO_ADMIN', 'ROLE_DOWNGRADE_TO_USER', name='notification_type_enum', native_enum=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['admin_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('admin_user_id', 'notification_type', name='uq_notification_recipient_user_type')
    )
    with op.batch_alter_table('notification_recipients', schema=None) as batch_op:
        batch_op.create_index('ix_notification_recipients_admin_user_id', ['admin_user_id'], unique=False)

    op.create_table('packages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('price', sa.BigInteger(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('data_quota_gb', sa.Numeric(precision=8, scale=2), nullable=False, comment='Kuota dalam GB. 0 berarti unlimited.'),
    sa.Column('duration_days', sa.Integer(), nullable=False),
    sa.Column('profile_id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['profile_id'], ['package_profiles.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('packages', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_packages_name'), ['name'], unique=True)

    op.create_table('promo_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=150), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('event_type', sa.Enum('BONUS_REGISTRATION', 'GENERAL_ANNOUNCEMENT', name='promo_event_type_enum', native_enum=False), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'ACTIVE', 'SCHEDULED', 'EXPIRED', 'ARCHIVED', name='promo_event_status_enum', native_enum=False), nullable=False),
    sa.Column('start_date', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('bonus_value_mb', sa.BigInteger(), nullable=True, comment='Nilai bonus dalam MB untuk event tipe BONUS_REGISTRATION'),
    sa.Column('bonus_duration_days', sa.Integer(), nullable=True, comment='Durasi masa aktif bonus dalam hari'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('promo_events', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_promo_events_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_promo_events_status'), ['status'], unique=False)

    op.create_table('quota_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('requester_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'PARTIALLY_APPROVED', name='request_status_enum', native_enum=False), nullable=False),
    sa.Column('request_type', sa.Enum('QUOTA', 'UNLIMITED', name='request_type_enum', native_enum=False), nullable=False),
    sa.Column('request_details', sa.Text(), nullable=True, comment="Detail request dlm JSON, misal: {'mb_to_add': 10240, 'days_to_add': 30}"),
    sa.Column('granted_details', sa.Text(), nullable=True, comment="Detail persetujuan parsial dlm JSON, misal: {'granted_mb': 5120, 'granted_duration_days': 15}"),
    sa.Column('rejection_reason', sa.Text(), nullable=True),
    sa.Column('processed_by_id', sa.UUID(), nullable=True),
    sa.Column('processed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['processed_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('quota_requests', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_quota_requests_processed_by_id'), ['processed_by_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_quota_requests_requester_id'), ['requester_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_quota_requests_status'), ['status'], unique=False)

    op.create_table('user_login_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('login_time', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent_string', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_login_history', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_login_history_user_id'), ['user_id'], unique=False)

    op.create_table('transactions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('package_id', sa.UUID(), nullable=False),
    sa.Column('midtrans_order_id', sa.String(length=100), nullable=False),
    sa.Column('midtrans_transaction_id', sa.String(length=100), nullable=True),
    sa.Column('snap_token', sa.String(length=200), nullable=True),
    sa.Column('snap_redirect_url', sa.String(length=255), nullable=True),
    sa.Column('amount', sa.BigInteger(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'SUCCESS', 'FAILED', 'EXPIRED', 'CANCELLED', 'UNKNOWN', name='transaction_status_enum', native_enum=False), nullable=False),
    sa.Column('payment_method', sa.String(length=50), nullable=True),
    sa.Column('payment_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expiry_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('va_number', sa.String(length=50), nullable=True),
    sa.Column('payment_code', sa.String(length=50), nullable=True),
    sa.Column('biller_code', sa.String(length=20), nullable=True),
    sa.Column('qr_code_url', sa.String(length=512), nullable=True),
    sa.Column('hotspot_password', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['package_id'], ['packages.id'], name='fk_transactions_package_id_packages', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_transactions_user_id_users', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('midtrans_order_id', name='uq_transactions_midtrans_order_id')
    )
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.create_index('ix_transactions_midtrans_order_id', ['midtrans_order_id'], unique=True)
        batch_op.create_index('ix_transactions_midtrans_transaction_id', ['midtrans_transaction_id'], unique=False)
        batch_op.create_index('ix_transactions_package_id', ['package_id'], unique=False)
        batch_op.create_index('ix_transactions_status', ['status'], unique=False)
        batch_op.create_index('ix_transactions_user_id', ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('transactions', schema=None) as batch_op:
        batch_op.drop_index('ix_transactions_user_id')
        batch_op.drop_index('ix_transactions_status')
        batch_op.drop_index('ix_transactions_package_id')
        batch_op.drop_index('ix_transactions_midtrans_transaction_id')
        batch_op.drop_index('ix_transactions_midtrans_order_id')

    op.drop_table('transactions')
    with op.batch_alter_table('user_login_history', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_login_history_user_id'))

    op.drop_table('user_login_history')
    with op.batch_alter_table('quota_requests', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_quota_requests_status'))
        batch_op.drop_index(batch_op.f('ix_quota_requests_requester_id'))
        batch_op.drop_index(batch_op.f('ix_quota_requests_processed_by_id'))

    op.drop_table('quota_requests')
    with op.batch_alter_table('promo_events', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_promo_events_status'))
        batch_op.drop_index(batch_op.f('ix_promo_events_name'))

    op.drop_table('promo_events')
    with op.batch_alter_table('packages', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_packages_name'))

    op.drop_table('packages')
    with op.batch_alter_table('notification_recipients', schema=None) as batch_op:
        batch_op.drop_index('ix_notification_recipients_admin_user_id')

    op.drop_table('notification_recipients')
    with op.batch_alter_table('daily_usage_logs', schema=None) as batch_op:
        batch_op.drop_index('ix_daily_usage_logs_user_id_log_date')
        batch_op.drop_index(batch_op.f('ix_daily_usage_logs_log_date'))

    op.drop_table('daily_usage_logs')
    with op.batch_alter_table('admin_action_logs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_admin_action_logs_target_user_id'))
        batch_op.drop_index(batch_op.f('ix_admin_action_logs_admin_id'))
        batch_op.drop_index(batch_op.f('ix_admin_action_logs_action_type'))

    op.drop_table('admin_action_logs')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index('ix_users_phone_number')

    op.drop_table('users')
    with op.batch_alter_table('package_profiles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_package_profiles_profile_name'))

    op.drop_table('package_profiles')
    op.drop_table('application_settings')
    # ### end Alembic commands ###
